generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  role         Role         @default(USER)
  email        String       @unique
  password     String
  nickname     String       @unique
  profileImage String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  // 연결
  report       Report[]     @relation("User_BookReport")
  reportLikes  ReportLike[] @relation("User_BookReportLike")
  notify       Notify?      @relation("notification")
}

enum Role {
  USER
  ADMIN
}

model Notify {
  id     String @id @default(uuid())
  // 연결
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], name: "notification")
}

model ReportLike {
  userId    String
  reportId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], name: "User_BookReportLike")
  report Report @relation(fields: [reportId], references: [id], name: "User_BookReportLike")

  @@id([userId, reportId])
}

model Report {
  id        String   @id @default(uuid())
  title     String
  content   String
  tags      String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 연결
  userId    String
  user      User         @relation(fields: [userId], references: [id], name: "User_BookReport", onDelete: Cascade)
  userLiked ReportLike[] @relation("User_BookReportLike")
  isbn13    String?
  book      Book?        @relation(fields: [isbn13], references: [isbn13], onDelete: SetNull)
}

model Book {
  isbn13             String   @unique
  title              String
  author             String
  description        String?
  cover              String?
  pubDate            String
  publisher          String
  categoryId         Int
  categoryName       String
  priceStandard      Int
  customerReviewRank Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  // 연결
  report             Report[]
  subInfoId          String
  subInfo            SubInfo  @relation(fields: [subInfoId], references: [id])
}

model SubInfo {
  id            String  @id @default(uuid())
  subTitle      String?
  originalTitle String?
  itemPage      Int?
  weight        Int?
  sizeDepth     Int?
  sizeHeight    Int?
  sizeWidth     Int?
  Book          Book[]
}
